# AUTOGENERATED! DO NOT EDIT! File to edit: Weibull_Model.ipynb (unless otherwise specified).

__all__ = ['Weibull']

# Cell
import torch
import torch.nn as nn
import torch.nn.functional as F

import matplotlib.pyplot as plt

# Cell
class Weibull(nn.Module):
    def __init__(self, dim:int=0, h:tuple=()):
        super().__init__()
        self.μ = nn.Parameter(-torch.rand(1))
        if dim > 0:
            nodes = (dim,) + h + (1,)
            self.layers = nn.ModuleList([nn.Linear(a,b, bias=False)
                                       for a,b in zip(nodes[:-1], nodes[1:])])

    def gumbel_logpdf(self, t:torch.Tensor, μ:torch.Tensor):
        z = t - μ
        return - (z + torch.exp(-z))

    def gumbel_logcdf(self, t:torch.Tensor, μ:torch.Tensor):
#         breakpoint()
        z = t - μ
        cdf = 1 - torch.exp(-torch.exp(-z))
        return torch.log(cdf)

    def forward(self, t:torch.Tensor, x:torch.Tensor=None):
        # get the Kaplan Meier estimates
        mu = self.μ
        if x:
            for layer in self.layers[:-1]:
                x = F.relu(layer(x))
            mu += self.layers[-1](x)
        mu = torch.exp(mu)

        logpdf = self.gumbel_logpdf(t, mu)
        logcdf = self.gumbel_logcdf(t, mu)
        return logpdf, logcdf

    def plot_survival_function(self, t:torch.Tensor, x:torch.Tensor=None):
        with torch.no_grad():
            # calculate cumulative hazard according to above
            _, Λ = self.forward(t, x)
            surv_fun = torch.exp(Λ)

        # plot
        plt.figure(figsize=(12,5))
        plt.plot(t, surv_fun)
        plt.xlabel('Time')
        plt.ylabel('Survival Probability')
        plt.show()